apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-db-init
  labels:
    {{- include "postgres-init.labels" . | nindent 4 }}
spec:
  backoffLimit: 10
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: {{ include "postgres-init.serviceAccountName" . }}
      containers:
        - name: db-init
          image: {{ .Values.dbInit.image.repository }}:{{ .Values.dbInit.image.tag }}
          imagePullPolicy: {{ .Values.dbInit.image.pullPolicy }}
          command:
            - "bash"
            - "-c"
            - | 
              set -eu -o pipefail
              set -x

              export DB_CLUSRER_NAME=potato666
              export DB_NAME=potato666
              export DB_USER=potatouser
              export DB_PW=potato123
              
              export PG_SERVICE="${DB_CLUSRER_NAME}-pgbouncer"
              export DUMP_FILES="/db-dumps/*"

              cat > ~/.pgpass <<EOF
              *:*:${DB_NAME}:${DB_USER}:${DB_PW}
              EOF
              chmod 0600 ~/.pgpass
              export PGPASSFILE=~/.pgpass

              function is_db_ready() {
                pg_isready -h "${PG_SERVICE}" | grep --silent "accepting connections"
              }

              function check_db() {
                time_left=600
                until is_db_ready; do
                  if [[ time_left -lt 0 ]]; then
                    echo "DB not ready, quit..."
                    exit 1
                  fi
                  time_left=$((time_left - 5))
                  echo "waiting ${time_left} for DB"
                  sleep 5
                done
                echo "db is ready"
              }
              check_db

              for f in $DUMP_FILES; do
                echo "Processing ${f} file..."
                psql -h "${PG_SERVICE}" -U "${DB_USER}" "${DB_NAME}" < "${f}"
              done
          resources:
            {{- toYaml .Values.dbInit.resources | nindent 12 }}
          volumeMounts:
            - name: db-dumps
              mountPath: "/db-dumps"
      volumes:
        - name: db-dumps
          configMap:
            name: {{ .Release.Name }}-db-dump
      {{- with .Values.dbInit.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
